#!/usr/bin/env bash

function path_search {
  found=$(type -P $*)
  set -- $found
  # Return first found
  echo $1
}


USER_FLAGS=" $* "
EXTRA_FLAGS=

# -----------------------------------------------
# Compiler
# -----------------------------------------------

MCC=mpimcc
MPICC=@MPICC@
MPICXX=@MPICXX@

# Setup options for MIC
if [[ "$USER_FLAGS" == *--mmic* ]] 
then
   EXTRA_FLAGS+=" -mmic"
   NANOX_INSTALL=@NANOX_MIC@
else
   NANOX_INSTALL=@NANOX@
fi

NANOX_CXX=$( cat $NANOX_INSTALL/src/arch/mpi/nanox_compiler )
if type -P "$NANOX_CXX" &> /dev/null; then 
   export I_MPI_CXX="$NANOX_CXX"
   export MPICH_CXX="$NANOX_CXX"
   export OMPI_CXX="$NANOX_CXX"
fi

# Find which compilers should be used
MPICXX=$(path_search $OFFL_CXX $MPICXX mpiicpc mpicxx)
if test ! -f "$MPICXX"; then
   echo "\
Could not find a MPI C++ compiler. Set PATH env. var accordingly to find either mpiicpc or mpicxx. \
OFFL_CXX can also be set if a different C++ MPI compiler."
   exit -1
fi

MPICC=$(path_search $OFFL_CC $MPICC mpiicc mpicc)
if test ! -f "$MPICC"; then
   echo "\
Could not find a MPI C compiler. Set PATH env. var accordingly to find either mpiicc or mpicc. \
OFFL_CC can also be set if a different C MPI compiler."
   exit -1
fi

# If a word starts with " g" it's GNU
if [[ $($MPICC -show) == *@GCC@* ]] 
then
    MCC="${MCC}_mcc"
else
    MCC="${MCC}_imcc"
fi

# Compiler command without flags
MCC="plaincxx --profile=${MCC}_base"
export I_MPI_CC="$MCC"
export OMPI_CC="$MCC"
export MPICH_CC="$MCC"

# -----------------------------------------------
# Flags
# -----------------------------------------------

# Extra flags for multithreading Intel MPI
if [[ $( $MPICXX -openmp -show ) == *-lmpi_mt* ]]
then
   EXTRA_FLAGS+=" -mt_mpi"
fi

# Special options:
case $USER_FLAGS in
*"-help "*)
   ${MCC} $USER_FLAGS
   echo "\
This Offload compiler uses internally $MPICC from your current PATH.\
If you want to change compiler, use OFFL_CC and OFFL_CXX env variables (make sure they point to the same MPI implementation).\
General guidelines about Offloading can be found in http://pm.bsc.es/ompss-docs/user-guide/run-programs-archs-offload.html"
   exit 0
   ;;
*"-showme:"*)
   echo "Showme is not supported. Offload will not work if this wrapper is not used"
   exit -1
   ;;
*"-show "*)
   echo "Show is not supported. Offload will not work if this wrapper is not used"
   exit -1
   ;;
*" --instrument "*)
   build_type=instrumentation
   ;;
*" --debug "*)
   build_type=debug
   ;;
*" --instrument "*"--debug "*|*" --debug "*"--instrument "*)
   build_type=instrumentation-debug
   ;;
*)
   build_type=performance
   ;;
esac

OLDPPWD=$PWD

if [[ "$USER_FLAGS" == *\ -c\ * ]]
then
   ${MPICC} $EXTRA_FLAGS $USER_FLAGS
elif [ $# -eq 0 ]
then
   ${MPICC} $EXTRA_FLAGS $USER_FLAGS
   echo "\
This Offload compiler uses internally $MPICC from your current PATH.
If you want to change compiler, use OFFL_CC and OFFL_CXX env variables (make sure they point to the same MPI implementation)."
   exit 0
else
   #remove possible remainders from previous compilations
   rm -f $OLDPPWD/temporaloffloadplugin*.o > /dev/null 2>&1
   trap "rm -f $OLDPPWD/temporaloffloadplugin$$.o" EXIT

   MPI_PLUGIN_FLAGS+=" "$(cat $NANOX_INSTALL/src/arch/mpi/${build_type}_flags)
   compile_messages=$( $MPICXX $EXTRA_FLAGS -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o 2>&1 )

   if [[ ! -f $OLDPPWD/temporaloffloadplugin$$.o ]] ;
   then 
       echo "\
Compiling OmpSs MPI Offload library
$MPICXX $EXTRA_FLAGS -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o
$compile_messages

OmpSs MPI Offload library could not be compiled.
Check if your environment is not producing any conflict. If it is not, please open a new issue on GitHub: https://github.com/bsc-pm/nanox/issues"
       exit -1
   fi

   ${MPICC} $EXTRA_FLAGS $OLDPPWD/temporaloffloadplugin$$.o $USER_FLAGS
   rm -f $OLDPPWD/temporaloffloadplugin$$.o
fi
