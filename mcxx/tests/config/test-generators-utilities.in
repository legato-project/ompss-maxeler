#!/usr/bin/env bash

## This function parses all the arguments of a test generator
function parse_arguments()
{
    for arg in $@
    do
        parse_argument $arg
    done
}

## Internal function that parses each argument of a test generator
function parse_argument()
{
    local argument=$1
    case $argument in
        c++11)
        TG_ARG_CXX11="yes"
        ;;
        ompss)
        TG_ARG_OMPSS="yes"
        ;;
        ompss-2)
        TG_ARG_OMPSS_2="yes"
        ;;
        openmp)
        TG_ARG_OPENMP="yes"
        ;;
        openmp-compatibility)
        TG_ARG_OPENMP_COMPATIBILITY="yes"
        ;;
        run)
        TG_ARG_RUN="yes"
        ;;
        svml)
        # FIXME: I'd like to remove this flag at some point...
        TG_ARG_SVML="yes"
        ;;
        *)
cat << EOF
    echo "TEST-GENERATOR: unrecognized $argument argument"
EOF
        ;;
    esac
}

## This function generates the commands that mark a test as ignored
function gen_ignore_test()
{
    local ignore_reason=$1

cat <<EOF
test_ignore=yes
test_ignore_reason="${ignore_reason}"
EOF
}

## Internal function that computes the gcc major and minor versions
function detect_gcc_version()
{
    A=$(gcc -v 2>&1 | tail -n 1 | @SED@ -e 's,^.*version\s*\([0-9]\)\.\([0-9]\+\)\(\.[0-9]\+\)*.*$,export GCC_VERSION_MAJOR=\1\nexport GCC_VERSION_MINOR=\2,')
    eval $A
}

## This function returns whether the current version of g++ supports c++11 (i.e. g++ version >= 4.8)
function gcc_supports_cxx11()
{
    local ret=0
    detect_gcc_version
    if [ $GCC_VERSION_MAJOR -lt 3 -o '(' $GCC_VERSION_MAJOR -eq 4 -a $GCC_VERSION_MINOR -lt 8 ')' ];
    then
        ret=1
    fi
    exit $ret
}

## This function returns whether the current version of gcc supports c11 (i.e. gcc version >= 4.8)
function gcc_supports_c11()
{
    local ret=0
    detect_gcc_version
    if [ $GCC_VERSION_MAJOR -lt 3 -o '(' $GCC_VERSION_MAJOR -eq 4 -a $GCC_VERSION_MINOR -lt 8 ')' ];
    then
        ret=1
    fi
    exit $ret
}

## This function returns whether the current version of g++ supports c++14 (i.e. g++ version >= 4.9)
function gcc_supports_cxx14()
{
    local ret=0
    detect_gcc_version
    if [ $GCC_VERSION_MAJOR -lt 3 -o '(' $GCC_VERSION_MAJOR -eq 4 -a $GCC_VERSION_MINOR -lt 9 ')' ];
    then
        ret=1
    fi
    exit $ret
}
