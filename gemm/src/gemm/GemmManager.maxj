package gemm;

import maxpower.blas.l3.TileMultiplierKernel;

import com.maxeler.maxcompiler.v2.kernelcompiler._KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;

public class GemmManager {
	
	private static class GemmCustomManager extends CustomManager {
		
		private GemmCustomManager(GemmEngineParameters params) {
			super(params);
			configBuild(params);
	
			DFEType type = params.getFloatingPointType();
	
			int tileSize = params.getTileSize();
	
			addMaxFileConstant("tileSize", tileSize);
			addMaxFileConstant("frequency", params.getFrequency());
	
			DFELink a = addStreamFromCPU("A");
			DFELink b = addStreamFromCPU("B");
	
			addStreamToCPU("C") <== TileMultiplierKernel.multiplyTiles(this, "TM", type, tileSize, a, b);
		}
	
		private void configBuild(GemmEngineParameters params) {
			BuildConfig buildConfig = getBuildConfig();
			buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
			buildConfig.setMPPRParallelism(params.getMPPRThreads());
			buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
			getBuildConfig().setBuildEffort(Effort.VERY_HIGH);
			config.setDefaultStreamClockFrequency(params.getFrequency());

			DebugLevel dbg = new DebugLevel();
			dbg.setHasStreamStatus(params.hasStreamStatus());
			debug.setDebugLevel(dbg);

			//getCurrentKernelConfig().optimization.setConditionalArithmeticEnabled(true);
			//getCurrentKernelConfig().optimization.setUseGlobalClockBuffer(true);
			//_KernelConfiguration.getPhotonKernelConfig(getCurrentKernelConfig()).optimizations().setBetterRegisteringEnabled(true);
		}
		
	}

	public static void main(String[] args) {
		GemmEngineParameters params = new GemmEngineParameters(args);
		new GemmCustomManager(params).build();
	}
}
